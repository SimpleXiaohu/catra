// Length abstraction satisfiability problem, generated by OSTRICH

counter int b_len, aut_len_cnt_2, a_len;

synchronised {  // Automata constraining b
automaton Aut_b_0 {
  init s0;
  s0 -> s1 [0, 119] {b_len += 1};
  s0 -> s2 [120, 120] {b_len += 1};
  s0 -> s1 [121, 65535] {b_len += 1};
  s1 -> s1 [0, 65535] {b_len += 1};
  s2 -> s1 [0, 120] {b_len += 1};
  s2 -> s3 [121, 121] {b_len += 1};
  s2 -> s1 [122, 65535] {b_len += 1};
  s3 -> s1 [0, 119] {b_len += 1};
  s3 -> s2 [120, 120] {b_len += 1};
  s3 -> s1 [121, 65535] {b_len += 1};
  accepting s1, s2;
};
};
synchronised {  // Automata constraining a
automaton Aut_a_1 {
  init s0;
  s0 -> s1 [120, 120] {a_len += 1};
  s1 -> s2 [121, 121] {a_len += 1};
  s2 -> s1 [120, 120] {a_len += 1};
  accepting s0, s2;
};
automaton Aut_a_2 {
  init s2;
  s0 -> s1 [120, 120] {aut_len_cnt_2 += 1};
  s1 -> s0 [121, 121] {aut_len_cnt_2 += 1};
  s2 -> s1 [120, 120] {aut_len_cnt_2 += 1};
  accepting s0;
};
};

constraint a_len = aut_len_cnt_2;
constraint a_len + -1 >= 0;
