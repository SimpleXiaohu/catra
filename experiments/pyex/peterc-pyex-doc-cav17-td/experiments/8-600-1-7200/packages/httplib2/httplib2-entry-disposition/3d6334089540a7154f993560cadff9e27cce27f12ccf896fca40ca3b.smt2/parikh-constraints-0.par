// Length abstraction satisfiability problem, generated by OSTRICH

counter int all_7_1_len, all_7_0_len, aut_len_cnt_12, aut_len_cnt_11, aut_len_cnt_10, aut_len_cnt_9, aut_len_cnt_8, all_1_1_len, aut_len_cnt_5, aut_len_cnt_4, aut_len_cnt_3, all_1_0, aut_len_cnt_6;

synchronised {  // Automata constraining all_7_1
automaton Aut_all_7_1_0 {
  init s0;
  s0 -> s0 [0, 65535] {all_7_1_len += 1};
  accepting s0;
};
};
synchronised {  // Automata constraining all_7_0
automaton Aut_all_7_0_1 {
  init s0;
  s0 -> s0 [0, 65535] {all_7_0_len += 1};
  accepting s0;
};
};
synchronised {  // Automata constraining value2
automaton Aut_value2_2 {
  init s0;
  s0 -> s0 [0, 60] {all_1_0 += 1};
  s0 -> s0 [62, 65535] {all_1_0 += 1};
  accepting s0;
};
automaton Aut_value2_3 {
  init s0;
  s0 -> s0 [0, 43] {aut_len_cnt_3 += 1};
  s0 -> s0 [45, 65535] {aut_len_cnt_3 += 1};
  accepting s0;
};
automaton Aut_value2_4 {
  init s0;
  s0 -> s1 [0, 65535] {aut_len_cnt_4 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_4 += 1};
  accepting s1;
};
automaton Aut_value2_5 {
  init s0;
  s0 -> s0 [0, 10] {aut_len_cnt_5 += 1};
  s0 -> s1 [11, 11] {aut_len_cnt_5 += 1};
  s0 -> s0 [12, 65535] {aut_len_cnt_5 += 1};
  s1 -> s0 [0, 10] {aut_len_cnt_5 += 1};
  s1 -> s1 [11, 11] {aut_len_cnt_5 += 1};
  s1 -> s0 [12, 65535] {aut_len_cnt_5 += 1};
  accepting s1;
};
};
synchronised {  // Automata constraining all_4_1
automaton Aut_all_4_1_6 {
  init s0;
  accepting s0;
};
};
synchronised {  // Automata constraining all_1_1
automaton Aut_all_1_1_7 {
  init s0;
  s0 -> s1 [0, 11] {all_1_1_len += 1};
  s0 -> s2 [12, 12] {all_1_1_len += 1};
  s0 -> s1 [13, 65535] {all_1_1_len += 1};
  s1 -> s1 [0, 65535] {all_1_1_len += 1};
  s2 -> s1 [0, 65535] {all_1_1_len += 1};
  accepting s0, s1;
};
automaton Aut_all_1_1_8 {
  init s0;
  s0 -> s1 [0, 10] {aut_len_cnt_8 += 1};
  s0 -> s2 [11, 11] {aut_len_cnt_8 += 1};
  s0 -> s1 [12, 65535] {aut_len_cnt_8 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_8 += 1};
  s2 -> s1 [0, 65535] {aut_len_cnt_8 += 1};
  accepting s0, s1;
};
automaton Aut_all_1_1_9 {
  init s0;
  s0 -> s1 [0, 12] {aut_len_cnt_9 += 1};
  s0 -> s2 [13, 13] {aut_len_cnt_9 += 1};
  s0 -> s1 [14, 65535] {aut_len_cnt_9 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_9 += 1};
  s2 -> s1 [0, 65535] {aut_len_cnt_9 += 1};
  accepting s0, s1;
};
automaton Aut_all_1_1_10 {
  init s0;
  s0 -> s1 [0, 9] {aut_len_cnt_10 += 1};
  s0 -> s2 [10, 10] {aut_len_cnt_10 += 1};
  s0 -> s1 [11, 65535] {aut_len_cnt_10 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_10 += 1};
  s2 -> s1 [0, 65535] {aut_len_cnt_10 += 1};
  accepting s0, s1;
};
automaton Aut_all_1_1_11 {
  init s0;
  s0 -> s1 [0, 8] {aut_len_cnt_11 += 1};
  s0 -> s2 [9, 9] {aut_len_cnt_11 += 1};
  s0 -> s1 [10, 65535] {aut_len_cnt_11 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_11 += 1};
  s2 -> s1 [0, 65535] {aut_len_cnt_11 += 1};
  accepting s0, s1;
};
automaton Aut_all_1_1_12 {
  init s0;
  s0 -> s1 [0, 31] {aut_len_cnt_12 += 1};
  s0 -> s2 [32, 32] {aut_len_cnt_12 += 1};
  s0 -> s1 [33, 65535] {aut_len_cnt_12 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_12 += 1};
  s2 -> s1 [0, 65535] {aut_len_cnt_12 += 1};
  accepting s0, s1;
};
};

constraint all_1_1_len = aut_len_cnt_12 && all_1_1_len = aut_len_cnt_11 && all_1_1_len = aut_len_cnt_10 && all_1_1_len = aut_len_cnt_9 && all_1_1_len = aut_len_cnt_8;
constraint all_1_0 = aut_len_cnt_5 && all_1_0 = aut_len_cnt_4 && all_1_0 = aut_len_cnt_3;
constraint all_1_0 + -1 = aut_len_cnt_6;
constraint (all_1_0 + -1 >= 0);
