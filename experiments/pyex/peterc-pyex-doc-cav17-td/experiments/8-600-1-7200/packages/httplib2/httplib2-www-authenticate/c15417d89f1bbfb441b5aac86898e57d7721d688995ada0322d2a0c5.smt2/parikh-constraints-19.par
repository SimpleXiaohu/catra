// Length abstraction satisfiability problem, generated by OSTRICH

counter int aut_len_cnt_5, aut_len_cnt_4, aut_len_cnt_3, aut_len_cnt_2, aut_len_cnt_1, aut_len_cnt_0, aut_len_cnt_35, aut_len_cnt_34, aut_len_cnt_33, aut_len_cnt_32, aut_len_cnt_31, aut_len_cnt_30, aut_len_cnt_29, all_7_0_len, aut_len_cnt_19, aut_len_cnt_18, aut_len_cnt_17, aut_len_cnt_16, aut_len_cnt_15, aut_len_cnt_14, aut_len_cnt_13, all_1_0, aut_len_cnt_27, aut_len_cnt_26, aut_len_cnt_25, aut_len_cnt_24, aut_len_cnt_23, aut_len_cnt_22, aut_len_cnt_21, all_7_1_len, aut_len_cnt_11, aut_len_cnt_10, aut_len_cnt_9, aut_len_cnt_8, aut_len_cnt_7, all_1_1_len;

synchronised {  // Automata constraining all_4_1
automaton Aut_all_4_1_0 {
  init s0;
  accepting s0;
};
automaton Aut_all_4_1_1 {
  init s0;
  accepting s0;
};
automaton Aut_all_4_1_2 {
  init s0;
  s0 -> s0 [0, 10] {aut_len_cnt_2 += 1};
  s0 -> s1 [11, 11] {aut_len_cnt_2 += 1};
  s0 -> s0 [12, 65535] {aut_len_cnt_2 += 1};
  s1 -> s0 [0, 10] {aut_len_cnt_2 += 1};
  s1 -> s1 [11, 11] {aut_len_cnt_2 += 1};
  s1 -> s0 [12, 65535] {aut_len_cnt_2 += 1};
  accepting s0;
};
automaton Aut_all_4_1_3 {
  init s0;
  accepting s0;
};
automaton Aut_all_4_1_4 {
  init s0;
  accepting s0;
};
automaton Aut_all_4_1_5 {
  init s0;
  accepting s0;
};
};
synchronised {  // Automata constraining all_1_1
automaton Aut_all_1_1_6 {
  init s0;
  s0 -> s1 [0, 11] {all_1_1_len += 1};
  s0 -> s2 [12, 12] {all_1_1_len += 1};
  s0 -> s1 [13, 65535] {all_1_1_len += 1};
  s1 -> s1 [0, 65535] {all_1_1_len += 1};
  s2 -> s1 [0, 65535] {all_1_1_len += 1};
  accepting s0, s1;
};
automaton Aut_all_1_1_7 {
  init s0;
  s0 -> s1 [0, 10] {aut_len_cnt_7 += 1};
  s0 -> s2 [11, 11] {aut_len_cnt_7 += 1};
  s0 -> s1 [12, 65535] {aut_len_cnt_7 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_7 += 1};
  s2 -> s1 [0, 65535] {aut_len_cnt_7 += 1};
  accepting s0, s1;
};
automaton Aut_all_1_1_8 {
  init s0;
  s0 -> s1 [0, 12] {aut_len_cnt_8 += 1};
  s0 -> s2 [13, 13] {aut_len_cnt_8 += 1};
  s0 -> s1 [14, 65535] {aut_len_cnt_8 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_8 += 1};
  s2 -> s1 [0, 65535] {aut_len_cnt_8 += 1};
  accepting s0, s1;
};
automaton Aut_all_1_1_9 {
  init s0;
  s0 -> s1 [0, 9] {aut_len_cnt_9 += 1};
  s0 -> s2 [10, 10] {aut_len_cnt_9 += 1};
  s0 -> s1 [11, 65535] {aut_len_cnt_9 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_9 += 1};
  s2 -> s1 [0, 65535] {aut_len_cnt_9 += 1};
  accepting s0, s1;
};
automaton Aut_all_1_1_10 {
  init s0;
  s0 -> s1 [0, 8] {aut_len_cnt_10 += 1};
  s0 -> s2 [9, 9] {aut_len_cnt_10 += 1};
  s0 -> s1 [10, 65535] {aut_len_cnt_10 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_10 += 1};
  s2 -> s1 [0, 65535] {aut_len_cnt_10 += 1};
  accepting s0, s1;
};
automaton Aut_all_1_1_11 {
  init s0;
  s0 -> s1 [0, 31] {aut_len_cnt_11 += 1};
  s0 -> s2 [32, 32] {aut_len_cnt_11 += 1};
  s0 -> s1 [33, 65535] {aut_len_cnt_11 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_11 += 1};
  s2 -> s1 [0, 65535] {aut_len_cnt_11 += 1};
  accepting s0, s1;
};
};
synchronised {  // Automata constraining value
automaton Aut_value_12 {
  init s0;
  s0 -> s1 [0, 65535] {all_1_0 += 1};
  s1 -> s1 [0, 65535] {all_1_0 += 1};
  accepting s1;
};
automaton Aut_value_13 {
  init s0;
  s0 -> s0 [0, 10] {aut_len_cnt_13 += 1};
  s0 -> s1 [11, 11] {aut_len_cnt_13 += 1};
  s0 -> s0 [12, 65535] {aut_len_cnt_13 += 1};
  s1 -> s0 [0, 10] {aut_len_cnt_13 += 1};
  s1 -> s1 [11, 11] {aut_len_cnt_13 += 1};
  s1 -> s0 [12, 65535] {aut_len_cnt_13 += 1};
  accepting s1;
};
automaton Aut_value_14 {
  init s0;
  s0 -> s1 [0, 11] {aut_len_cnt_14 += 1};
  s0 -> s1 [13, 65535] {aut_len_cnt_14 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_14 += 1};
  accepting s0, s1;
};
automaton Aut_value_15 {
  init s0;
  s0 -> s1 [0, 10] {aut_len_cnt_15 += 1};
  s0 -> s1 [12, 65535] {aut_len_cnt_15 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_15 += 1};
  accepting s0, s1;
};
automaton Aut_value_16 {
  init s0;
  s0 -> s1 [0, 12] {aut_len_cnt_16 += 1};
  s0 -> s1 [14, 65535] {aut_len_cnt_16 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_16 += 1};
  accepting s0, s1;
};
automaton Aut_value_17 {
  init s0;
  s0 -> s1 [0, 9] {aut_len_cnt_17 += 1};
  s0 -> s1 [11, 65535] {aut_len_cnt_17 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_17 += 1};
  accepting s0, s1;
};
automaton Aut_value_18 {
  init s0;
  s0 -> s1 [0, 8] {aut_len_cnt_18 += 1};
  s0 -> s1 [10, 65535] {aut_len_cnt_18 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_18 += 1};
  accepting s0, s1;
};
automaton Aut_value_19 {
  init s0;
  s0 -> s1 [0, 31] {aut_len_cnt_19 += 1};
  s0 -> s1 [33, 65535] {aut_len_cnt_19 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_19 += 1};
  accepting s0, s1;
};
};
synchronised {  // Automata constraining all_7_1
automaton Aut_all_7_1_20 {
  init s1;
  s0 -> s0 [0, 65535] {all_7_1_len += 1};
  s1 -> s0 [0, 65535] {all_7_1_len += 1};
  accepting s0;
};
automaton Aut_all_7_1_21 {
  init s1;
  s0 -> s1 [0, 10] {aut_len_cnt_21 += 1};
  s0 -> s0 [11, 11] {aut_len_cnt_21 += 1};
  s0 -> s1 [12, 65535] {aut_len_cnt_21 += 1};
  s1 -> s1 [0, 10] {aut_len_cnt_21 += 1};
  s1 -> s0 [11, 11] {aut_len_cnt_21 += 1};
  s1 -> s1 [12, 65535] {aut_len_cnt_21 += 1};
  accepting s0;
};
automaton Aut_all_7_1_22 {
  init s0;
  s0 -> s1 [0, 11] {aut_len_cnt_22 += 1};
  s0 -> s1 [13, 65535] {aut_len_cnt_22 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_22 += 1};
  accepting s0, s1;
};
automaton Aut_all_7_1_23 {
  init s0;
  s0 -> s1 [0, 10] {aut_len_cnt_23 += 1};
  s0 -> s1 [12, 65535] {aut_len_cnt_23 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_23 += 1};
  accepting s0, s1;
};
automaton Aut_all_7_1_24 {
  init s0;
  s0 -> s1 [0, 12] {aut_len_cnt_24 += 1};
  s0 -> s1 [14, 65535] {aut_len_cnt_24 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_24 += 1};
  accepting s0, s1;
};
automaton Aut_all_7_1_25 {
  init s0;
  s0 -> s1 [0, 9] {aut_len_cnt_25 += 1};
  s0 -> s1 [11, 65535] {aut_len_cnt_25 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_25 += 1};
  accepting s0, s1;
};
automaton Aut_all_7_1_26 {
  init s0;
  s0 -> s1 [0, 8] {aut_len_cnt_26 += 1};
  s0 -> s1 [10, 65535] {aut_len_cnt_26 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_26 += 1};
  accepting s0, s1;
};
automaton Aut_all_7_1_27 {
  init s0;
  s0 -> s1 [0, 31] {aut_len_cnt_27 += 1};
  s0 -> s1 [33, 65535] {aut_len_cnt_27 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_27 += 1};
  accepting s0, s1;
};
};
synchronised {  // Automata constraining all_7_0
automaton Aut_all_7_0_28 {
  init s0;
  accepting s0;
};
automaton Aut_all_7_0_29 {
  init s0;
  s0 -> s0 [0, 10] {aut_len_cnt_29 += 1};
  s0 -> s1 [11, 11] {aut_len_cnt_29 += 1};
  s0 -> s0 [12, 65535] {aut_len_cnt_29 += 1};
  s1 -> s0 [0, 10] {aut_len_cnt_29 += 1};
  s1 -> s1 [11, 11] {aut_len_cnt_29 += 1};
  s1 -> s0 [12, 65535] {aut_len_cnt_29 += 1};
  accepting s0;
};
automaton Aut_all_7_0_30 {
  init s0;
  accepting s0;
};
automaton Aut_all_7_0_31 {
  init s0;
  accepting s0;
};
automaton Aut_all_7_0_32 {
  init s0;
  accepting s0;
};
automaton Aut_all_7_0_33 {
  init s0;
  accepting s0;
};
automaton Aut_all_7_0_34 {
  init s0;
  accepting s0;
};
automaton Aut_all_7_0_35 {
  init s0;
  accepting s0;
};
};

constraint all_1_0 + -1 = aut_len_cnt_5 && all_1_0 + -1 = aut_len_cnt_4 && all_1_0 + -1 = aut_len_cnt_3 && all_1_0 + -1 = aut_len_cnt_2 && all_1_0 + -1 = aut_len_cnt_1 && all_1_0 + -1 = aut_len_cnt_0;
constraint all_7_0_len = aut_len_cnt_35 && all_7_0_len = aut_len_cnt_34 && all_7_0_len = aut_len_cnt_33 && all_7_0_len = aut_len_cnt_32 && all_7_0_len = aut_len_cnt_31 && all_7_0_len = aut_len_cnt_30 && all_7_0_len = aut_len_cnt_29;
constraint all_1_0 = aut_len_cnt_19 && all_1_0 = aut_len_cnt_18 && all_1_0 = aut_len_cnt_17 && all_1_0 = aut_len_cnt_16 && all_1_0 = aut_len_cnt_15 && all_1_0 = aut_len_cnt_14 && all_1_0 = aut_len_cnt_13;
constraint all_7_1_len = aut_len_cnt_27 && all_7_1_len = aut_len_cnt_26 && all_7_1_len = aut_len_cnt_25 && all_7_1_len = aut_len_cnt_24 && all_7_1_len = aut_len_cnt_23 && all_7_1_len = aut_len_cnt_22 && all_7_1_len = aut_len_cnt_21;
constraint all_1_1_len = aut_len_cnt_11 && all_1_1_len = aut_len_cnt_10 && all_1_1_len = aut_len_cnt_9 && all_1_1_len = aut_len_cnt_8 && all_1_1_len = aut_len_cnt_7;
constraint (all_1_0 + -1 >= 0);
