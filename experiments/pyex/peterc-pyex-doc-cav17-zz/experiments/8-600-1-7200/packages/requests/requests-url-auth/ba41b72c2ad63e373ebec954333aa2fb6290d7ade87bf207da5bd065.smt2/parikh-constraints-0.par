// Length abstraction satisfiability problem, generated by OSTRICH

counter int aut_len_cnt_2, aut_len_cnt_1, all_1_0, all_10_4_len;

synchronised {  // Automata constraining url
automaton Aut_url_0 {
  init s0;
  s0 -> s0 [0, 65535] {all_1_0 += 1};
  s0 -> s1 [59, 59] {all_1_0 += 1};
  s1 -> s2 [0, 65535] {all_1_0 += 1};
  s2 -> s2 [0, 65535] {all_1_0 += 1};
  accepting s1, s2;
};
automaton Aut_url_1 {
  init s0;
  s0 -> s0 [0, 62] {aut_len_cnt_1 += 1};
  s0 -> s0 [64, 65535] {aut_len_cnt_1 += 1};
  accepting s0;
};
automaton Aut_url_2 {
  init s0;
  s0 -> s0 [0, 34] {aut_len_cnt_2 += 1};
  s0 -> s0 [36, 65535] {aut_len_cnt_2 += 1};
  accepting s0;
};
};
synchronised {  // Automata constraining all_10_4
automaton Aut_all_10_4_3 {
  init s2;
  s0 -> s1 [0, 65535] {all_10_4_len += 1};
  s1 -> s1 [0, 65535] {all_10_4_len += 1};
  s2 -> s2 [0, 65535] {all_10_4_len += 1};
  s2 -> s0 [59, 59] {all_10_4_len += 1};
  accepting s0, s1;
};
};

constraint all_1_0 = aut_len_cnt_2 && all_1_0 = aut_len_cnt_1;
constraint (-1*all_1_0 + 1 >= 0);
constraint (all_1_0 >= 0);
