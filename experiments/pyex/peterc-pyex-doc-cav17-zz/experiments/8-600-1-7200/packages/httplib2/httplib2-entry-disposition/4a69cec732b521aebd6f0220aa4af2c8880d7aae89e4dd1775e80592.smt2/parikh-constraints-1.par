// Length abstraction satisfiability problem, generated by OSTRICH

counter int aut_len_cnt_2, all_4_0_len, aut_len_cnt_8, aut_len_cnt_7, value1_len, aut_len_cnt_5, all_4_2_len, value2_len, all_2_0;

synchronised {  // Automata constraining value2
automaton Aut_value2_0 {
  init s0;
  accepting s0;
};
};
synchronised {  // Automata constraining all_4_0
automaton Aut_all_4_0_1 {
  init s0;
  s0 -> s0 [0, 60] {all_4_0_len += 1};
  s0 -> s0 [62, 65535] {all_4_0_len += 1};
  accepting s0;
};
automaton Aut_all_4_0_2 {
  init s0;
  s0 -> s0 [0, 43] {aut_len_cnt_2 += 1};
  s0 -> s0 [45, 65535] {aut_len_cnt_2 += 1};
  accepting s0;
};
};
synchronised {  // Automata constraining all_4_1
automaton Aut_all_4_1_3 {
  init s0;
  s0 -> s0 [0, 60] {all_2_0 += 1};
  s0 -> s0 [62, 65535] {all_2_0 += 1};
  accepting s0;
};
};
synchronised {  // Automata constraining all_4_2
automaton Aut_all_4_2_4 {
  init s0;
  s0 -> s0 [0, 60] {all_4_2_len += 1};
  s0 -> s0 [62, 65535] {all_4_2_len += 1};
  accepting s0;
};
automaton Aut_all_4_2_5 {
  init s0;
  s0 -> s0 [0, 43] {aut_len_cnt_5 += 1};
  s0 -> s0 [45, 65535] {aut_len_cnt_5 += 1};
  accepting s0;
};
};
synchronised {  // Automata constraining value1
automaton Aut_value1_6 {
  init s0;
  s0 -> s0 [0, 60] {value1_len += 1};
  s0 -> s0 [62, 65535] {value1_len += 1};
  accepting s0;
};
automaton Aut_value1_7 {
  init s0;
  s0 -> s0 [0, 43] {aut_len_cnt_7 += 1};
  s0 -> s0 [45, 65535] {aut_len_cnt_7 += 1};
  accepting s0;
};
automaton Aut_value1_8 {
  init s0;
  s0 -> s1 [0, 65535] {aut_len_cnt_8 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_8 += 1};
  accepting s1;
};
};

constraint all_4_0_len = aut_len_cnt_2;
constraint value1_len = aut_len_cnt_8 && value1_len = aut_len_cnt_7;
constraint all_4_2_len = aut_len_cnt_5;
constraint (all_2_0 >= 0);
