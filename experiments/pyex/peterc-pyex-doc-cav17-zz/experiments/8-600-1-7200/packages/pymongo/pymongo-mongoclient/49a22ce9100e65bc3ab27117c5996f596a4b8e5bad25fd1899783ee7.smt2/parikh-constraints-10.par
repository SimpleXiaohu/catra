// Length abstraction satisfiability problem, generated by OSTRICH

counter int aut_len_cnt_12, aut_len_cnt_11, aut_len_cnt_10, uri_len, aut_len_cnt_16, aut_len_cnt_15, aut_len_cnt_14, all_4_2_len, aut_len_cnt_8, aut_len_cnt_7, aut_len_cnt_6, all_4_0_len, aut_len_cnt_4, aut_len_cnt_3, aut_len_cnt_2, aut_len_cnt_1, all_2_0;

synchronised {  // Automata constraining all_4_1
automaton Aut_all_4_1_0 {
  init s0;
  s0 -> s0 [0, 92] {all_2_0 += 1};
  s0 -> s0 [94, 65535] {all_2_0 += 1};
  accepting s0;
};
automaton Aut_all_4_1_1 {
  init s0;
  s0 -> s0 [0, 57] {aut_len_cnt_1 += 1};
  s0 -> s2 [58, 58] {aut_len_cnt_1 += 1};
  s0 -> s0 [59, 65535] {aut_len_cnt_1 += 1};
  s1 -> s0 [0, 46] {aut_len_cnt_1 += 1};
  s1 -> s0 [48, 57] {aut_len_cnt_1 += 1};
  s1 -> s2 [58, 58] {aut_len_cnt_1 += 1};
  s1 -> s0 [59, 65535] {aut_len_cnt_1 += 1};
  s2 -> s0 [0, 46] {aut_len_cnt_1 += 1};
  s2 -> s1 [47, 47] {aut_len_cnt_1 += 1};
  s2 -> s0 [48, 57] {aut_len_cnt_1 += 1};
  s2 -> s2 [58, 58] {aut_len_cnt_1 += 1};
  s2 -> s0 [59, 65535] {aut_len_cnt_1 += 1};
  accepting s0;
};
automaton Aut_all_4_1_2 {
  init s0;
  s0 -> s0 [0, 43] {aut_len_cnt_2 += 1};
  s0 -> s0 [45, 65535] {aut_len_cnt_2 += 1};
  accepting s0;
};
automaton Aut_all_4_1_3 {
  init s1;
  s0 -> s0 [0, 65535] {aut_len_cnt_3 += 1};
  s1 -> s0 [0, 65535] {aut_len_cnt_3 += 1};
  accepting s0;
};
automaton Aut_all_4_1_4 {
  init s1;
  s0 -> s0 [0, 65535] {aut_len_cnt_4 += 1};
  s1 -> s0 [91, 91] {aut_len_cnt_4 += 1};
  accepting s0;
};
};
synchronised {  // Automata constraining all_4_0
automaton Aut_all_4_0_5 {
  init s0;
  s0 -> s0 [0, 57] {all_4_0_len += 1};
  s0 -> s2 [58, 58] {all_4_0_len += 1};
  s0 -> s0 [59, 65535] {all_4_0_len += 1};
  s1 -> s0 [0, 46] {all_4_0_len += 1};
  s1 -> s0 [48, 57] {all_4_0_len += 1};
  s1 -> s2 [58, 58] {all_4_0_len += 1};
  s1 -> s0 [59, 65535] {all_4_0_len += 1};
  s2 -> s0 [0, 46] {all_4_0_len += 1};
  s2 -> s1 [47, 47] {all_4_0_len += 1};
  s2 -> s0 [48, 57] {all_4_0_len += 1};
  s2 -> s2 [58, 58] {all_4_0_len += 1};
  s2 -> s0 [59, 65535] {all_4_0_len += 1};
  accepting s0;
};
automaton Aut_all_4_0_6 {
  init s0;
  s0 -> s0 [0, 43] {aut_len_cnt_6 += 1};
  s0 -> s0 [45, 65535] {aut_len_cnt_6 += 1};
  accepting s0;
};
automaton Aut_all_4_0_7 {
  init s1;
  s0 -> s0 [0, 65535] {aut_len_cnt_7 += 1};
  s1 -> s0 [0, 65535] {aut_len_cnt_7 += 1};
  accepting s0;
};
automaton Aut_all_4_0_8 {
  init s1;
  s0 -> s0 [0, 65535] {aut_len_cnt_8 += 1};
  s1 -> s0 [91, 91] {aut_len_cnt_8 += 1};
  accepting s0;
};
};
synchronised {  // Automata constraining uri
automaton Aut_uri_9 {
  init s0;
  s0 -> s0 [0, 57] {uri_len += 1};
  s0 -> s1 [58, 58] {uri_len += 1};
  s0 -> s0 [59, 65535] {uri_len += 1};
  s1 -> s0 [0, 46] {uri_len += 1};
  s1 -> s2 [47, 47] {uri_len += 1};
  s1 -> s0 [48, 57] {uri_len += 1};
  s1 -> s1 [58, 58] {uri_len += 1};
  s1 -> s0 [59, 65535] {uri_len += 1};
  s2 -> s0 [0, 46] {uri_len += 1};
  s2 -> s0 [48, 57] {uri_len += 1};
  s2 -> s1 [58, 58] {uri_len += 1};
  s2 -> s0 [59, 65535] {uri_len += 1};
  accepting s0, s1, s2;
};
automaton Aut_uri_10 {
  init s0;
  s0 -> s0 [0, 43] {aut_len_cnt_10 += 1};
  s0 -> s0 [45, 65535] {aut_len_cnt_10 += 1};
  accepting s0;
};
automaton Aut_uri_11 {
  init s0;
  s0 -> s1 [0, 65535] {aut_len_cnt_11 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_11 += 1};
  accepting s1;
};
automaton Aut_uri_12 {
  init s0;
  s0 -> s1 [91, 91] {aut_len_cnt_12 += 1};
  s1 -> s1 [0, 65535] {aut_len_cnt_12 += 1};
  accepting s1;
};
};
synchronised {  // Automata constraining all_4_2
automaton Aut_all_4_2_13 {
  init s0;
  s0 -> s0 [0, 57] {all_4_2_len += 1};
  s0 -> s1 [58, 58] {all_4_2_len += 1};
  s0 -> s0 [59, 65535] {all_4_2_len += 1};
  s1 -> s0 [0, 46] {all_4_2_len += 1};
  s1 -> s2 [47, 47] {all_4_2_len += 1};
  s1 -> s0 [48, 57] {all_4_2_len += 1};
  s1 -> s1 [58, 58] {all_4_2_len += 1};
  s1 -> s0 [59, 65535] {all_4_2_len += 1};
  s2 -> s0 [0, 46] {all_4_2_len += 1};
  s2 -> s0 [48, 57] {all_4_2_len += 1};
  s2 -> s1 [58, 58] {all_4_2_len += 1};
  s2 -> s0 [59, 65535] {all_4_2_len += 1};
  accepting s0, s1, s2;
};
automaton Aut_all_4_2_14 {
  init s0;
  s0 -> s0 [0, 43] {aut_len_cnt_14 += 1};
  s0 -> s0 [45, 65535] {aut_len_cnt_14 += 1};
  accepting s0;
};
automaton Aut_all_4_2_15 {
  init s0;
  s0 -> s0 [0, 65535] {aut_len_cnt_15 += 1};
  accepting s0;
};
automaton Aut_all_4_2_16 {
  init s0;
  s0 -> s0 [0, 65535] {aut_len_cnt_16 += 1};
  accepting s0;
};
};

constraint uri_len = aut_len_cnt_12 && uri_len = aut_len_cnt_11 && uri_len = aut_len_cnt_10;
constraint all_4_2_len = aut_len_cnt_16 && all_4_2_len = aut_len_cnt_15 && all_4_2_len = aut_len_cnt_14;
constraint all_4_0_len = aut_len_cnt_8 && all_4_0_len = aut_len_cnt_7 && all_4_0_len = aut_len_cnt_6;
constraint all_2_0 = aut_len_cnt_4 && all_2_0 = aut_len_cnt_3 && all_2_0 = aut_len_cnt_2 && all_2_0 = aut_len_cnt_1;
constraint (all_2_0 >= 0);
